datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [postgis(version: "3.3.2")]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

enum Beds {
  double
  single
  crib
}

enum Amenities {
  Wifi
  Heating
  AirConditioning
  Washer
  Dryer
  Iron
  Essentials
  HotWater
  TV
  Refrigerator
  Microwave
  CoffeeMaker
  CookingBasics
  Oven
  Stove
  Dishwasher
  DishesAndSilverware
  Kitchen
  SmokeAlarm
  CarbonMonoxideAlarm
  FirstAidKit
  FireExtinguisher
  BedroomLock
  HighChair
  BabySafetyGates
  BabysitterRecommendations
  FreeParkingOnPremises
  PaidParkingOffPremises
  PaidParkingOnPremises
  Elevator
  WheelchairAccessible
  BbqGrill
  PatioOrBalcony
  GardenOrBackyard
  PrivateEntrance
  Gym
  Pool
  HotTub
  Sauna
  LongTermStaysAllowed
  LuggageDropoffAllowed
  CleaningBeforeCheckout
  PetsAllowed
  BoardGames
  BooksAndReadingMaterial
  SmartTV
  DedicatedWorkspace
}

enum AmenitiesType {
  Basic
  Kitchen
  Safety
  Family
  Parking_and_Accessibility
  Outdoor
  Fitness
  Additional
  Pets
  Entertainment
}

enum BookingStatus {
  pending
  confirmed
  canceled
  completed
}

model Stay {
  id             String      @id @default(uuid())
  name           String
  type           String
  price          Float       @default(0)
  summary        String      @default("")
  description    String      @default("")
  entireHome     Boolean
  capacity       Int
  baths          Int         @default(0)
  bedroomsAmount Int         @default(0)
  totalBeds      Int         @default(0)
  hostId         String
  host           Profile     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  locationId     String      @unique
  location       Location    @relation(fields: [locationId], references: [id], onDelete: Cascade)
  images         String[]
  amenities      Amenity[]   @relation("StayAmenities")
  labels         String[]    @default([""])
  reviews        Review[]
  likes          Like[]
  bedrooms       BedRoom[]
  booking        Booking[]
  highlights     Highlight[]
}

model Review {
  id     String  @id @default(uuid())
  stayId String
  stay   Stay    @relation(fields: [stayId], references: [id], onDelete: Cascade)
  text   String
  rate   Int
  userId String
  user   Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id         String     @id @default(uuid())
  supabaseId String     @unique
  isOwner    Boolean
  ownerSince DateTime?
  firstName  String
  lastName   String
  imgUrl     String
  dob        DateTime
  stays      Stay[]
  review     Review[]
  likes      Like[]
  bookings   Booking[]  @relation("booker")
  hosting    Booking[]  @relation("host")
  AuditLog   AuditLog[]

  @@map("User")
}

model Location {
  id          String @id @default(uuid())
  country     String
  countryCode String
  city        String
  address     String
  lat         Float
  lng         Float
  stay        Stay?
}

model Amenity {
  id    String    @id @default(uuid())
  name  Amenities
  stays Stay[]    @relation("StayAmenities")
}

model BedRoom {
  id     String   @id @default(uuid())
  beds   Beds[]
  images String[]
  stayId String
  stay   Stay     @relation(fields: [stayId], references: [id], onDelete: Cascade)
}

model Like {
  id     String  @id @default(uuid())
  notes  String?
  userId String
  user   Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  stayId String
  stay   Stay    @relation(fields: [stayId], references: [id], onDelete: Cascade)
}

model Booking {
  id          String        @id @default(uuid())
  stayId      String
  stay        Stay          @relation(fields: [stayId], references: [id])
  userId      String
  user        Profile       @relation("booker", fields: [userId], references: [id])
  hostId      String
  host        Profile       @relation("host", fields: [hostId], references: [id])
  status      BookingStatus
  price       Float
  adults      Int           @default(1)
  children    Int           @default(0)
  infants     Int           @default(0)
  pets        Int           @default(0)
  checkIn     DateTime
  checkOut    DateTime
  bookingTime DateTime
  AuditLog    AuditLog[]
}

model SvgIcon {
  id        Int         @id @default(autoincrement())
  name      String
  path      String
  viewBox   String
  Highlight Highlight[]
}

model Highlight {
  id          String  @id @default(uuid())
  title       String
  description String
  iconId      Int
  icon        SvgIcon @relation(fields: [iconId], references: [id])
  stayId      String
  stay        Stay    @relation(fields: [stayId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String   @default("update")
  createdAt DateTime
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  userId    String
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
}
