// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate https//pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")

}

enum Beds {
  double
  single
  crib
}

enum Amenities {
  Wifi
  Heating
  AirConditioning
  Washer
  Dryer
  Iron
  Essentials
  HotWater
  TV
  Refrigerator
  Microwave
  CoffeeMaker
  CookingBasics
  Oven
  Stove
  Dishwasher
  DishesAndSilverware
  Kitchen
  SmokeAlarm
  CarbonMonoxideAlarm
  FirstAidKit
  FireExtinguisher
  BedroomLock
  HighChair
  BabySafetyGates
  BabysitterRecommendations
  FreeParkingOnPremises
  PaidParkingOffPremises
  PaidParkingOnPremises
  Elevator
  WheelchairAccessible
  BbqGrill
  PatioOrBalcony
  GardenOrBackyard
  PrivateEntrance
  Gym
  Pool
  HotTub
  Sauna
  LongTermStaysAllowed
  LuggageDropoffAllowed
  CleaningBeforeCheckout
  PetsAllowed
  BoardGames
  BooksAndReadingMaterial
  SmartTV
  DedicatedWorkspace
}

enum AmenitiesType {
  Basic
  Kitchen
  Safety
  Family
  Parking_and_Accessibility
  Outdoor
  Fitness
  Additional
  Pets
  Entertainment
}

model Stay {
  id          String    @id @default(uuid())
  name        String
  type        String
  price       Float
  summary     String
  description String?
  capacity    Int
  baths       Int?
  uniqueRooms String[]
  hostId      String
  host        Profile   @relation(fields: [hostId], references: [id], onDelete: Cascade)
  locationId  String    @unique
  location    Location  @relation(fields: [locationId], references: [id])
  images      Image[]
  amenities   Amenity[] @relation("StayAmenities")
  labels      Label[]
  reviews     Review[]
  likes       Like[]
  bedrooms    BedRoom[]
  Booking     Booking[]
}

model Review {
  id     String  @id @default(uuid())
  stayId String
  stay   Stay    @relation(fields: [stayId], references: [id])
  text   String
  rate   Int
  userId String
  user   Profile @relation(fields: [userId], references: [id])
}

model Profile {
  id         String    @id @default(uuid())
  isOwner    Boolean
  ownerSince DateTime?
  supabaseId String    @unique
  stays      Stay[]
  review     Review[]
  likes      Like[]
  bookings   Booking[] @relation("booker")
  hosting    Booking[] @relation("host")

  @@map("User")
}

model Location {
  id          String @id @default(uuid())
  country     String
  countryCode String
  city        String
  address     String
  lat         Float
  lng         Float
  stay        Stay?
}

model Amenity {
  id    String    @id @default(uuid())
  name  Amenities
  stays Stay[]    @relation("StayAmenities")
}

model BedRoom {
  id     String  @id @default(uuid())
  beds   Beds[]
  images Image[]
  stayId String
  stay   Stay    @relation(fields: [stayId], references: [id])
}

model Label {
  id    String @id @default(uuid())
  name  String
  stays Stay[]
}

model Like {
  id     String  @id @default(uuid())
  userId String
  user   Profile @relation(fields: [userId], references: [id])
  stayId String
  stay   Stay    @relation(fields: [stayId], references: [id])
}

model Image {
  id     String   @id @default(uuid())
  url    String
  stayId String?
  stay   Stay?    @relation(fields: [stayId], references: [id])
  Room   BedRoom? @relation(fields: [roomId], references: [id])
  roomId String?
}

model Booking {
  id          String   @id @default(uuid())
  stayId      String?
  stay        Stay?    @relation(fields: [stayId], references: [id])
  userId      String
  user        Profile  @relation("booker", fields: [userId], references: [id])
  hostId      String
  host        Profile  @relation("host", fields: [hostId], references: [id])
  price       Float
  checkIn     DateTime
  checkOut    DateTime
  bookingTIme DateTime
}
