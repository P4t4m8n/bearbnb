// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate https//pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Beds {
  double
  single
  crib
}

model Stay {
  id          String    @id @default(uuid())
  name        String
  type        String
  price       Float
  summary     String
  description String?
  capacity    Int
  baths       Int?
  uniqueRooms String[]
  hostId      String
  host        Profile   @relation(fields: [hostId], references: [id], onDelete: Cascade)
  locationId  String    @unique
  location    Location  @relation(fields: [locationId], references: [id])
  images      Image[]
  amenities   Amenity[]
  labels      Label[]
  reviews     Review[]
  likes       Like[]
  bedrooms    BedRoom[]
}

model Review {
  id     String  @id @default(uuid())
  stayId String
  stay   Stay    @relation(fields: [stayId], references: [id])
  text   String
  rate   Int
  userId String
  user   Profile @relation(fields: [userId], references: [id])
}

model Profile {
  id         String    @id @default(uuid())
  isOwner    Boolean
  ownerSince DateTime?
  stays      Stay[]
  review     Review[]
  likes      Like[]
  supabaseId String    @unique

  @@map("User")
}

model Location {
  id          String @id @default(uuid())
  country     String
  countryCode String
  city        String
  address     String
  lat         Float
  lng         Float
  stay        Stay?
}

model Amenity {
  id    String @id @default(uuid())
  name  String
  stays Stay[]
}

model BedRoom {
  id     String  @id @default(uuid())
  beds   Bed[]
  images Image[]
  stayId String
  stay   Stay    @relation(fields: [stayId], references: [id])
}

model Bed {
  id        String  @id @default(uuid())
  type      Beds
  room      BedRoom @relation(fields: [bedRoomId], references: [id])
  bedRoomId String
}

model Label {
  id    String @id @default(uuid())
  name  String
  stays Stay[]
}

model Like {
  id     String  @id @default(uuid())
  userId String
  user   Profile @relation(fields: [userId], references: [id])
  stayId String
  stay   Stay    @relation(fields: [stayId], references: [id])
}

model Image {
  id     String   @id @default(uuid())
  url    String
  stayId String?
  stay   Stay?    @relation(fields: [stayId], references: [id])
  Room   BedRoom? @relation(fields: [roomId], references: [id])
  roomId String?
}
